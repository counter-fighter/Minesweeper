import tkinter as tk
import random
from minesweeper import Minesweeper

class Vertical_Horizontal_TwoTilesAway(Minesweeper):
    def __init__(self, master, rows, cols, mines, load_main_menu):
        super().__init__(master, rows, cols, mines, load_main_menu)

    def Rule_Click(self):
        messagebox.showinfo("Rule", "The clue refers to the tiles vertically and horizontally in the range of 2 tiles away from the number instead of the surrounding tiles.")

    def calculate_numbers(self):
        for r in range(self.rows):
            for c in range(self.cols):
                if self.grid[r][c] == -1:
                    continue
                count = 0
                if r >= 2:
                    count += sum(1 for i in range(r-1, r-3, -1) if self.grid[i][c] == -1)
                if r < self.rows - 2:
                    count += sum(1 for i in range(r+1, r+3) if self.grid[i][c] == -1)
                if c >= 2:
                    count += sum(1 for j in range(c-1, c-3, -1) if self.grid[r][j] == -1)
                if c < self.cols - 2:
                    count += sum(1 for j in range(c+1, c+3) if self.grid[r][j] == -1)
            
                self.grid[r][c] = count

    def on_enter(self, r, c):
        if self.revealed[r][c]:
            if c > 0 and not self.revealed[r][c-1]:
                self.buttons[(r, c-2)].config(bg="lightgray")
            if c < self.cols - 2 and not self.revealed[r][c+1]:
                self.buttons[(r, c+2)].config(bg="lightgray")
            if r > 0 and not self.revealed[r-1][c]:
                self.buttons[(r-2, c)].config(bg="lightgray")
            if r < self.rows - 1 and not self.revealed[r+1][c]:
                self.buttons[(r+2, c)].config(bg="lightgray")
            if c > 0 and not self.revealed[r][c-1]:
                self.buttons[(r, c-1)].config(bg="lightgray")
            if c < self.cols - 2 and not self.revealed[r][c+1]:
                self.buttons[(r, c+1)].config(bg="lightgray")
            if r > 0 and not self.revealed[r-1][c]:
                self.buttons[(r-1, c)].config(bg="lightgray")
            if r < self.rows - 1 and not self.revealed[r+1][c]:
                self.buttons[(r+1, c)].config(bg="lightgray")
                
    def on_leave(self, r, c):
        if self.revealed[r][c]:
            if c > 0 and not self.revealed[r][c-1]:
                self.buttons[(r, c-2)].config(bg="SystemButtonFace")
            if c < self.cols - 1 and not self.revealed[r][c+1]:
                self.buttons[(r, c+2)].config(bg="SystemButtonFace")
            if r > 0 and not self.revealed[r-1][c]:
                self.buttons[(r-2, c)].config(bg="SystemButtonFace")
            if r < self.rows - 1 and not self.revealed[r+1][c]:
                self.buttons[(r+2, c)].config(bg="SystemButtonFace")
            if c > 0 and not self.revealed[r][c-1]:
                self.buttons[(r, c-1)].config(bg="SystemButtonFace")
            if c < self.cols - 1 and not self.revealed[r][c+1]:
                self.buttons[(r, c+1)].config(bg="SystemButtonFace")
            if r > 0 and not self.revealed[r-1][c]:
                self.buttons[(r-1, c)].config(bg="SystemButtonFace")
            if r < self.rows - 1 and not self.revealed[r+1][c]:
                self.buttons[(r+1, c)].config(bg="SystemButtonFace")
